// Avery Wiehe

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.geometry.Insets;
import javafx.stage.Stage;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

public class Assignment6 extends Application {
  @Override // Override the start method in the Application class
  public void start(Stage primaryStage) {
    // Create a pane to hold the image views and set padding
    Pane pane = new HBox(10);
    pane.setPadding(new Insets(5, 5, 5, 5));
    
    // Create an array to hold the String url's for each .png file that contains an image of a card.
    // Files are stored in the src folder of this project being created. If they are not stored in the 
    // same place on the users local machine, no cards will show because the URL's must match.
    String[] cardURLs = {"1.png", "2.png", "3.png", "4.png", "5.png", "6.png", "7.png", "8.png", "9.png", "10.png", "11.png", "12.png", "13.png", "14.png", "15.png", "16.png", "17.png", "18.png", "19.png", "20.png", "21.png", "22.png", "23.png", "24.png", "25.png", "26.png", "27.png", "28.png", "29.png", "30.png", "31.png", "32.png", "33.png", "34.png", "35.png", "36.png", "37.png", "38.png", "39.png", "40.png", "41.png", "42.png", "43.png", "44.png", "45.png", "46.png", "47.png", "48.png", "49.png", "50.png", "51.png", "52.png"};
    
    // Create an array that will hold card URLs after they are used. This array will be checked each time new cards are drawn.
    // The length of the new string array is set to cardURLs.length instead of 52 as a matter of keeping code maintainable (for
    // example, in the case that new cards are added to the array, such as jokers).
    String[] usedCardURLs = new String[cardURLs.length];
    
    // A kind of "counter" that will serve as parameter for add(), when used to place card in array of used cards. Will also be
    // used to indicate how far through the used card array the loop that checks if the card is used needs to check. This value
    // will be incremented.
    int insertPositionForNextUsedCard = 0;
    
    // Randomly pick an index of cardURLs array
    int firstRandCardNum = (int) (Math.random() * 52) + 1;
    int secondRandCardNum = (int) (Math.random() * 52) + 1;
    int thirdRandCardNum = (int) (Math.random() * 52) + 1;
    
    // Create a for loop to check in the usedCardURLs if that cards URL has been used before
    for(int i = 0; i <= insertPositionForNextUsedCard; i++) {
    	if(usedCardURLs[i].equals(firstRandCardNum)) {
    		
    	}
    }
    
    String firstRandImgURL = cardURLs[firstRandCardNum];
    String secondRandImgURL = cardURLs[secondRandCardNum];
    String thirdRandImgURL = cardURLs[thirdRandCardNum];
    
    // Create three new Image objects, one for each card to be displayed
    Image firstCardImage = new Image(firstRandImgURL);
    Image secondCardImage = new Image(secondRandImgURL);
    Image thirdCardImage = new Image(thirdRandImgURL);
    
    pane.getChildren().add(new ImageView(firstCardImage));
    pane.getChildren().add(new ImageView(secondCardImage));
    pane.getChildren().add(new ImageView(thirdCardImage));
    
    
    // *** Alternatively you could pass the URL of the .png file directly into the ImageView constructor as
    // *** is done below. However, the instructions mention using the image constructor
    
    /*
    // Create a new ImageView(String url) object, by passing the nThRandImgURL to the constructor
    // Add that ImageView as a child to the pane
    // Do this three times (one for each card)
    pane.getChildren().add(new ImageView(firstRandImgURL));
    pane.getChildren().add(new ImageView(secondRandImgURL));
    pane.getChildren().add(new ImageView(thirdRandImgURL));
    */
        
    // Create a scene and place it in the stage
    Scene scene = new Scene(pane);
    // Set the title as it appears to be set in instructions demo image
    primaryStage.setTitle("Assignment 5");
    // set the scene for the stage
    primaryStage.setScene(scene);
    // show the stage
    primaryStage.show();
  }

  public static void main(String[] args) {
    launch(args);
  }
}